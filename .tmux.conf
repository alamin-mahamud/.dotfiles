# Standalone Tmux Configuration
# Optimized for productivity and DevOps workflows with enhanced mouse support
# Reload with: Prefix + r

# ============================================================================
# GENERAL SETTINGS
# ============================================================================

# Set default terminal to support 256 colors and true color (Tc)
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color*:Tc"

# Enable mouse support for selecting, scrolling, resizing
set -g mouse on

# Set clipboard integration for seamless copy/paste
set -g set-clipboard on

# Increase scrollback buffer size (default: 2000)
set -g history-limit 50000

# Start window and pane indexing at 1 (more intuitive)
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows sequentially after closing any of them
set -g renumber-windows on

# Enable focus events for vim/nvim autoread
set -g focus-events on

# Faster command sequences (default: 500ms)
set -s escape-time 10

# Increase repeat timeout for key sequences
set -g repeat-time 600

# ============================================================================
# KEY BINDINGS - PREFIX AND BASIC OPERATIONS
# ============================================================================

# Change prefix key to Ctrl-a (easier to reach than Ctrl-b)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Reload configuration file with prefix + r
bind r source-file ~/.tmux.conf \; display-message "ðŸ”„ Config reloaded!"

# Better window splitting with visual characters
bind | split-window -h -c "#{pane_current_path}"  # Split vertically with |
bind - split-window -v -c "#{pane_current_path}"  # Split horizontally with -
unbind '"'
unbind %

# New window in current path
bind c new-window -c "#{pane_current_path}"

# ============================================================================
# NAVIGATION - VIM-STYLE MOVEMENTS
# ============================================================================

# Vim-like pane navigation (prefix + hjkl)
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Pane resizing with vim keys (prefix + HJKL)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Window navigation with Ctrl+h/l
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Quick session switching
bind S choose-session

# Kill session with confirmation
bind X confirm-before -p "Kill session #S? (y/n)" kill-session

# ============================================================================
# COPY MODE CONFIGURATION - VIM BINDINGS
# ============================================================================

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Enter copy mode with prefix + [ or Alt + [
bind [ copy-mode
bind -n M-[ copy-mode

# Copy mode key bindings
bind -T copy-mode-vi v send-keys -X begin-selection     # Start selection with v
bind -T copy-mode-vi r send-keys -X rectangle-toggle    # Rectangle selection with r
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle  # Rectangle selection with Ctrl-v
bind -T copy-mode-vi q send-keys -X cancel              # Exit with q
bind -T copy-mode-vi Escape send-keys -X cancel         # Exit with Escape

# Platform-specific copy commands (y to copy)
if-shell "uname | grep -q Darwin" \
    "bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'" \
    "bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'"

# ============================================================================
# MOUSE CONFIGURATION - SCROLLING, SELECTING, COPYING
# ============================================================================

# Mouse wheel scrolling - enters copy mode automatically
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# Scroll 3 lines at a time (adjust for faster/slower scrolling)
bind -T copy-mode-vi WheelUpPane send-keys -X -N 3 scroll-up
bind -T copy-mode-vi WheelDownPane send-keys -X -N 3 scroll-down

# Mouse selection - start selection on drag
bind -T copy-mode-vi MouseDrag1Pane select-pane \; send-keys -X begin-selection

# Platform-specific mouse copy on release (stays in copy mode)
if-shell "uname | grep -q Darwin" {
    # macOS
    bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
    bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe "pbcopy"
    bind -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe "pbcopy"
} {
    # Linux - auto-detect clipboard utility
    if-shell "command -v xclip > /dev/null" {
        bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"
        bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe "xclip -in -selection clipboard"
        bind -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe "xclip -in -selection clipboard"
    } {
        bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -ib"
        bind -T copy-mode-vi DoubleClick1Pane select-pane \; send-keys -X select-word \; send-keys -X copy-pipe "xsel -ib"
        bind -T copy-mode-vi TripleClick1Pane select-pane \; send-keys -X select-line \; send-keys -X copy-pipe "xsel -ib"
    }
}

# Clear selection on single click
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

# Middle click to paste from tmux buffer
bind -n MouseDown2Pane paste-buffer

# Right click context menu (optional)
bind -n MouseDown3Pane display-menu -x M -y M \
    "Copy" c "copy-mode" \
    "Paste" p "paste-buffer" \
    "Cancel" q ""

# Shift+MouseDrag to bypass tmux (useful for selecting in vim)
bind -n S-MouseDrag1Pane set -q @mouse-orig-status $status \; set -g mouse off
bind -n S-MouseDragEnd1Pane set -g mouse on \; display-message "Mouse re-enabled"

# ============================================================================
# STATUS BAR CONFIGURATION
# ============================================================================

# Status bar colors and styling
set -g status-bg colour235
set -g status-fg colour255
set -g status-interval 5

# Status bar position
set -g status-position bottom

# Status bar format
set -g status-left-length 50
set -g status-right-length 100

# Left side: session name with icon
set -g status-left "#[fg=colour39,bg=colour235,bold] #S #[fg=colour245]| "

# Right side: prefix indicator, time, date, user@host
set -g status-right "#[fg=colour245]#{?client_prefix,ðŸ”´ ,}#[fg=colour39]%H:%M #[fg=colour245]| #[fg=colour39]%d-%b #[fg=colour245]| #[fg=colour39]#(whoami)@#h"

# Window status format
setw -g window-status-format "#[fg=colour245] #I:#W "
setw -g window-status-current-format "#[fg=colour39,bg=colour238,bold] #I:#W "

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity off
setw -g window-status-activity-style "fg=colour196,bg=colour235"

# ============================================================================
# PANE STYLING
# ============================================================================

# Pane borders
set -g pane-border-style "fg=colour238"
set -g pane-active-border-style "fg=colour39"

# Message styling
set -g message-style "fg=colour255,bg=colour238,bold"
set -g message-command-style "fg=colour255,bg=colour238,bold"

# ============================================================================
# DEVOPS SHORTCUTS
# ============================================================================

# Quick system monitoring with htop/top
bind-key -r i split-window -h "htop || top"

# Docker container monitoring
bind-key -r d split-window -h "if command -v docker &> /dev/null; then docker ps -a; echo ''; echo 'Press Enter to monitor containers:'; read; docker stats; else echo 'Docker not installed'; fi"

# System log monitoring (auto-detects available log system)
bind-key -r L split-window -h "if [ -f /var/log/syslog ]; then tail -f /var/log/syslog; elif [ -f /var/log/messages ]; then tail -f /var/log/messages; else journalctl -f; fi"

# Kubernetes shortcuts (if kubectl is available)
bind-key -r K new-window -n "k8s" "if command -v kubectl &> /dev/null; then kubectl get pods --all-namespaces; else echo 'kubectl not found'; fi"

# Network connections monitoring
bind-key -r N split-window -h "if command -v ss &> /dev/null; then watch -n 1 'ss -tunap | grep ESTABLISHED'; else watch -n 1 'netstat -tunap | grep ESTABLISHED'; fi"

# ============================================================================
# PLUGIN CONFIGURATION
# ============================================================================

# List of plugins
set -g @plugin 'tmux-plugins/tpm'              # Tmux Plugin Manager
set -g @plugin 'tmux-plugins/tmux-sensible'    # Sensible defaults
set -g @plugin 'tmux-plugins/tmux-resurrect'   # Session persistence
set -g @plugin 'tmux-plugins/tmux-continuum'   # Automatic save/restore
set -g @plugin 'tmux-plugins/tmux-yank'        # Enhanced copy/paste

# Plugin configurations
# Resurrect - save/restore sessions across restarts
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# Continuum - automatic session saves
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'

# ============================================================================
# MOUSE OPERATIONS QUICK REFERENCE
# ============================================================================
# Scroll up/down       - Mouse wheel (enters copy mode automatically)
# Select text          - Click and drag (copies on release)
# Select word          - Double-click
# Select line          - Triple-click
# Rectangle select     - Enter copy mode, press 'r', then drag
# Paste                - Middle-click
# Clear selection      - Single click
# Exit copy mode       - q or Escape
# Bypass tmux          - Hold Shift while selecting (for vim/app selection)
# Toggle mouse         - Prefix + m (custom binding below)
# ============================================================================

# Toggle mouse on/off (useful for terminal app selection)
bind m set -g mouse \; display-message "Mouse #{?mouse,on,off}"

# Initialize TMUX plugin manager (keep this line at the very bottom)
run '~/.tmux/plugins/tpm/tpm'
